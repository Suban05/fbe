# MIT License
#
# Copyright (c) 2024 Zerocracy
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

(undef explain)
(defn explain '
  r = @operands[0].evaluate(fact, maps);
  if !r && !$loog.nil?
    $loog.error(\'This rule failed: \' + self.to_s)
  end
  return r
  ')

(explain (when
  (exists what)
  (or
    (eq what 'events-were-scanned')
    (eq what 'labels-were-scanned')
    (eq what 'bug-was-accepted')
    (eq what 'bug-was-resolved')
    (eq what 'comment-was-posted')
    (eq what 'git-was-pushed')
    (eq what 'events-were-scanned')
    (eq what 'issue-was-closed')
    (eq what 'issue-was-opened')
    (eq what 'issue-was-assigned')
    (eq what 'label-was-attached')
    (eq what 'release-published')
    (eq what 'reward-for-bug-reported')
    (eq what 'reward-for-resolved-bug')
    (eq what 'tag-was-created'))))

(explain (when
  (exists what)
  (matches what "^[a-z]+(-[a-z]+)*$")))

(explain (when
  (exists details)
  (and
    (not (matches details "  "))
    (not (matches details "^.{,120}$"))
    (not (matches details "[^.]$")))))

(explain (when
  (exists _id)
  (eq "Integer" (type _id))))
(explain (when
  (exists _time)
  (eq "Time" (type _time))))
(explain (when
  (exists _version)
  (eq "String" (type _version))))
(explain (when
  (exists issue)
  (and
    (eq "Integer" (type issue))
    (gt issue 0))))
(explain (when
  (exists repository)
  (eq "Integer" (type repository))))
(explain (when
  (exists who)
  (eq "Integer" (type who))))
(explain (when
  (exists award)
  (eq "Integer" (type award))))

(explain (when
  (exists when)
  (eq "Time" (type when))))

(explain (when
  (exists issue)
  (exists repository)))

(explain (when
  (exists award)
  (and
    (exists when)
    (exists who)
    (exists reason))))

(explain (when
  (eq what 'events-were-scanned')
  (and
    (exists repository)
    (exists latest)
    (eq "Integer" (type latest)))))

(explain (when
  (eq what 'label-was-attached')
  (and
    (exists issue)
    (exists label)
    (eq "String" (type label)))))

(explain (when
  (eq what 'issue-was-opened')
  (and
    (exists issue)
    (exists when)
    (exists who))))

(explain (when
  (eq what 'issue-was-closed')
  (and
    (exists issue)
    (exists when)
    (exists who))))

(explain (when
  (eq what 'bug-was-resolved')
  (and
    (exists cause)
    (exists when)
    (exists issue)
    (exists details)
    (exists who))))

(explain (when
  (eq what 'bug-was-accepted')
  (and
    (exists cause)
    (exists when)
    (exists issue)
    (exists details)
    (exists reporter)
    (eq "Integer" (type reporter))
    (exists who))))

(explain (when
  (eq what 'bug-report-was-rewarded')
  (and
    (exists cause)
    (exists award)
    (eq "Integer" (type award))
    (exists when)
    (exists issue)
    (exists repository))))

